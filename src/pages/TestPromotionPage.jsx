import { useState, useEffect } from 'react'
import apiService from '../services/api'
import './TestPromotionPage.css'

function TestPromotionPage() {
  const [promotions, setPromotions] = useState([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)
  const [selectedPromotion, setSelectedPromotion] = useState(null)
  const [testData, setTestData] = useState({
    stake: '',
    promotion_id: '',
    selections: [
      { sport: 'football', result: 'lose', market: 'handicap', period: 'full_time', odds: 1.9 }
    ]
  })
  const [testResult, setTestResult] = useState(null)
  const [isTesting, setIsTesting] = useState(false)
  const [testError, setTestError] = useState(null)

  useEffect(() => {
    fetchPromotions()
  }, [])

  const fetchPromotions = async () => {
    try {
      setLoading(true)
      const data = await apiService.getPromotions()
      setPromotions(data)
    } catch (err) {
      setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡πÑ‡∏î‡πâ')
      console.error('Error fetching promotions:', err)
    } finally {
      setLoading(false)
    }
  }

  const handlePromotionSelect = (promotion) => {
    setSelectedPromotion(promotion)
    setTestData(prev => ({
      ...prev,
      promotion_id: promotion.id
    }))
  }

  const handleInputChange = (e) => {
    const { name, value } = e.target
    setTestData(prev => ({
      ...prev,
      [name]: value
    }))
  }

  const handleSelectionChange = (index, field, value) => {
    setTestData(prev => ({
      ...prev,
      selections: prev.selections.map((selection, i) => 
        i === index ? { ...selection, [field]: value } : selection
      )
    }))
  }

  const addSelection = () => {
    setTestData(prev => ({
      ...prev,
      selections: [...prev.selections, {
        sport: 'boxing',
        result: 'lose',
        market: 'handicap',
        period: 'full_time',
        odds: 1.9
      }]
    }))
  }

  const removeSelection = (index) => {
    if (testData.selections.length > 1) {
      setTestData(prev => ({
        ...prev,
        selections: prev.selections.filter((_, i) => i !== index)
      }))
    }
  }

  const handleTest = async () => {
    if (!testData.stake || !testData.promotion_id) {
      setTestError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô')
      return
    }

    setIsTesting(true)
    setTestError(null)
    setTestResult(null)

    try {
      const response = await apiService.testPromotion({
        stake: parseFloat(testData.stake),
        promotion_id: parseInt(testData.promotion_id),
        selections: testData.selections.map(selection => ({
          ...selection,
          odds: parseFloat(selection.odds)
        }))
      })
      
      setTestResult(response)
    } catch (err) {
      setTestError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡πÑ‡∏î‡πâ: ' + (err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'))
      console.error('Test error:', err)
    } finally {
      setIsTesting(false)
    }
  }

  const getPromotionTypeName = (type) => {
    const typeNames = {
      'welcome_bonus': '‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö',
      'cashback': '‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô',
      'weekend_bonus': '‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏™‡∏∏‡∏î‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå',
      'deposit_bonus': '‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô',
      'referral_bonus': '‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô',
      'lose_all_refund': '‡πÅ‡∏û‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏π‡πà‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô'
    }
    return typeNames[type] || type
  }

  const getResultName = (result) => {
    const resultNames = {
      'win': '‡∏ä‡∏ô‡∏∞',
      'lose': '‡πÅ‡∏û‡πâ',
      'draw': '‡πÄ‡∏™‡∏°‡∏≠'
    }
    return resultNames[result] || result
  }

  const getSportName = (sport) => {
    const sportNames = {
      'football': '‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•',
      'boxing': '‡∏°‡∏ß‡∏¢',
      'all': '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'
    }
    return sportNames[sport] || sport
  }

  if (loading) {
    return (
      <div className="test-page">
        <div className="loading-container">
          <div className="loading-spinner"></div>
          <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="test-page">
        <div className="error-container">
          <h2>‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</h2>
          <p>{error}</p>
          <button onClick={fetchPromotions} className="retry-btn">
            ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
          </button>
        </div>
      </div>
    )
  }

  return (
    <div className="test-page">
      <div className="test-header">
        <h1>üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô</h1>
        <p>‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</p>
      </div>

      <div className="test-content">
        <div className="promotion-selector">
          <h2>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô</h2>
          <div className="promotions-grid">
            {promotions.map(promotion => (
              <div 
                key={promotion.id}
                className={`promotion-card ${selectedPromotion?.id === promotion.id ? 'selected' : ''}`}
                onClick={() => handlePromotionSelect(promotion)}
              >
                <div className="card-header">
                  <h3>{promotion.name}</h3>
                  <span className="promotion-type">{getPromotionTypeName(promotion.type)}</span>
                </div>
                <div className="card-content">
                  <p>{promotion.description}</p>
                  <div className="promotion-info">
                    <span>ID: {promotion.id}</span>
                    <span className={`status ${promotion.is_active ? 'active' : 'inactive'}`}>
                      {promotion.is_active ? '‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' : '‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'}
                    </span>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {selectedPromotion && (
          <div className="test-form">
            <h2>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö</h2>
            
            <div className="form-section">
              <h3>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô</h3>
              <div className="selected-promotion">
                <h4>{selectedPromotion.name}</h4>
                <p>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {getPromotionTypeName(selectedPromotion.type)}</p>
                <p>ID: {selectedPromotion.id}</p>
              </div>
            </div>

            <div className="form-section">
              <h3>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô</h3>
              <div className="form-group">
                <label>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô (‡∏ö‡∏≤‡∏ó)</label>
                <input
                  type="number"
                  name="stake"
                  value={testData.stake}
                  onChange={handleInputChange}
                  placeholder="100"
                  min="1"
                  step="0.01"
                />
              </div>
            </div>

            <div className="form-section">
              <h3>‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô</h3>
              {testData.selections.map((selection, index) => (
                <div key={index} className="selection-item">
                  <div className="selection-header">
                    <h4>‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô #{index + 1}</h4>
                    {testData.selections.length > 1 && (
                      <button 
                        type="button" 
                        className="remove-btn"
                        onClick={() => removeSelection(index)}
                      >
                        ‡∏•‡∏ö
                      </button>
                    )}
                  </div>
                  
                  <div className="selection-fields">
                    <div className="form-group">
                      <label>‡∏Å‡∏µ‡∏¨‡∏≤</label>
                      <select
                        value={selection.sport}
                        onChange={(e) => handleSelectionChange(index, 'sport', e.target.value)}
                      >
                        <option value="football">‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•</option>
                        <option value="boxing">‡∏°‡∏ß‡∏¢</option>
                      </select>
                    </div>

                    <div className="form-group">
                      <label>‡∏ú‡∏•</label>
                      <select
                        value={selection.result}
                        onChange={(e) => handleSelectionChange(index, 'result', e.target.value)}
                      >
                        <option value="win">‡∏ä‡∏ô‡∏∞</option>
                        <option value="lose">‡πÅ‡∏û‡πâ</option>
                        <option value="draw">‡πÄ‡∏™‡∏°‡∏≠</option>
                      </select>
                    </div>

                    <div className="form-group">
                      <label>‡∏ï‡∏•‡∏≤‡∏î</label>
                      <select
                        value={selection.market}
                        onChange={(e) => handleSelectionChange(index, 'market', e.target.value)}
                      >
                        <option value="handicap">‡πÅ‡∏Æ‡∏ô‡∏î‡∏¥‡πÅ‡∏Ñ‡∏õ</option>
                        <option value="over_under">‡∏™‡∏π‡∏á/‡∏ï‡πà‡∏≥</option>
                        <option value="1x2">1X2</option>
                      </select>
                    </div>

                    <div className="form-group">
                      <label>‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤</label>
                      <select
                        value={selection.period}
                        onChange={(e) => handleSelectionChange(index, 'period', e.target.value)}
                      >
                        <option value="full_time">‡πÄ‡∏ï‡πá‡∏°‡πÄ‡∏ß‡∏•‡∏≤</option>
                        <option value="first_half">‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡πÅ‡∏£‡∏Å</option>
                        <option value="second_half">‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏´‡∏•‡∏±‡∏á</option>
                      </select>
                    </div>

                    <div className="form-group">
                      <label>‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏ï‡πà‡∏≠‡∏£‡∏≠‡∏á</label>
                      <input
                        type="number"
                        value={selection.odds}
                        onChange={(e) => handleSelectionChange(index, 'odds', parseFloat(e.target.value))}
                        placeholder="1.9"
                        min="1"
                        step="0.01"
                      />
                    </div>
                  </div>
                </div>
              ))}
              
              <button type="button" className="add-selection-btn" onClick={addSelection}>
                + ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô
              </button>
            </div>

            <div className="form-actions">
              <button 
                className="test-btn"
                onClick={handleTest}
                disabled={isTesting}
              >
                {isTesting ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö...' : 'üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô'}
              </button>
            </div>

            {testError && (
              <div className="error-message">
                <h4>‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î</h4>
                <p>{testError}</p>
              </div>
            )}

            {testResult && (
              <div className="test-result">
                <h3>üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö</h3>
                <div className="result-content">
                  <div className="result-section">
                    <h4>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô</h4>
                    <p><strong>ID:</strong> {testResult.promotion?.id || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</p>
                    <p><strong>‡∏ä‡∏∑‡πà‡∏≠:</strong> {testResult.promotion?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</p>
                    <p><strong>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:</strong> {getPromotionTypeName(testResult.promotion?.type)}</p>
                  </div>

                  <div className="result-section">
                    <h4>‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì</h4>
                    <p><strong>‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô:</strong> {testResult.stake} ‡∏ö‡∏≤‡∏ó</p>
                    <p><strong>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô:</strong> {testData.selections.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</p>
                    <p><strong>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á:</strong> {testResult.selectionsCount || 0} ‡∏Ñ‡∏π‡πà</p>
                    <p><strong>‡∏ï‡∏±‡∏ß‡∏Ñ‡∏π‡∏ì:</strong> {testResult.multiplier || 0}x</p>
                    <p><strong>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</strong> {testResult.eligible ? '‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç' : '‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç'}</p>
                  </div>

                  <div className="result-section">
                    <h4>‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå</h4>
                    <p><strong>‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç:</strong> {testResult.eligible ? '‚úÖ ‡∏ú‡πà‡∏≤‡∏ô' : '‚ùå ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô'}</p>
                    <p><strong>‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:</strong> {testResult.bonus_amount || ((testResult.cappedRefund || 0) - testResult.stake < 0 ? testResult.cappedRefund || 0 : (testResult.cappedRefund || 0) - testResult.stake)} ‡∏ö‡∏≤‡∏ó</p>
                    <p><strong>‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏∑‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì:</strong> {testResult.computedRefund || 0} ‡∏ö‡∏≤‡∏ó</p>
                    <p><strong>‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏∑‡∏ô‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á:</strong> {testResult.cappedRefund || 0} ‡∏ö‡∏≤‡∏ó</p>
                  </div>

                  {testResult.caps && (
                    <div className="result-section">
                      <h4>‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î</h4>
                      <p><strong>‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ï‡πà‡∏≠‡∏ö‡∏¥‡∏•:</strong> {testResult.caps.maxPayoutPerBill ? `${testResult.caps.maxPayoutPerBill} ‡∏ö‡∏≤‡∏ó` : '‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î'}</p>
                      <p><strong>‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô:</strong> {testResult.caps.maxPayoutPerDay ? `${testResult.caps.maxPayoutPerDay} ‡∏ö‡∏≤‡∏ó` : '‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î'}</p>
                      <p><strong>‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:</strong> {testResult.caps.maxPayoutPerUser ? `${testResult.caps.maxPayoutPerUser} ‡∏ö‡∏≤‡∏ó` : '‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î'}</p>
                    </div>
                  )}

                  {testResult.reasons && testResult.reasons.length > 0 && (
                    <div className="result-section">
                      <h4>‚ùå ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô</h4>
                      <ul style={{ margin: '8px 0', paddingLeft: '20px' }}>
                        {testResult.reasons.map((reason, index) => (
                          <li key={index} style={{ color: '#dc2626', marginBottom: '4px' }}>
                            {reason}
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}

                  {testResult.message && (
                    <div className="result-message">
                      <h4>‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°</h4>
                      <p>{testResult.message}</p>
                    </div>
                  )}
                </div>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  )
}

export default TestPromotionPage
