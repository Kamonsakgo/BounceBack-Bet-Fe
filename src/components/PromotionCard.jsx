import { useState } from 'react'
import { useNavigate } from 'react-router-dom'
import './PromotionCard.css'

function PromotionCard({ promotion, formatDate, formatCurrency, getStatusBadge }) {
  const [isExpanded, setIsExpanded] = useState(false)
  const navigate = useNavigate()

  const handleEdit = () => {
    navigate(`/edit-promotion/${promotion.id}`)
  }

  const getSettingsInfo = (settings, promotionType) => {
    if (!settings) return "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"
    
    switch (promotionType) {
      case 'welcome_bonus':
        return `‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö: ${settings.bonus_percentage}%`
      case 'cashback':
        return `‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô: ${settings.cashback_percentage}%`
      case 'weekend_bonus':
        return `‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡∏™‡∏∏‡∏î‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå: ${settings.bonus_multiplier}x ‡∏ï‡∏±‡∏ß‡∏Ñ‡∏π‡∏ì`
      case 'lose_all_refund':
        if (settings.tiers && settings.tiers.length > 0) {
          const tierTexts = settings.tiers.map(tier => 
            `${tier.pairs} ‡∏Ñ‡∏π‡πà = ${tier.multiplier}x`
          ).join(', ')
          return `‡πÅ‡∏û‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏π‡πà‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô: ${tierTexts}`
        }
        return `‡πÅ‡∏û‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏π‡πà‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô: ‡πÄ‡∏™‡∏µ‡∏¢ ${settings.required_loss_pairs || 0} ‡∏Ñ‡∏π‡πà ‡πÑ‡∏î‡πâ‡∏Ñ‡∏∑‡∏ô ${settings.refund_amount || 0} ‡∏ö‡∏≤‡∏ó`
      default:
        return `‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${promotionType}`
    }
  }

  const getPriorityColor = (priority) => {
    if (priority >= 90) return '#ff6b6b'
    if (priority >= 70) return '#ffa726'
    return '#4ade80'
  }

  return (
    <div className="promotion-card">
      <div className="card-header">
        <div className="card-title">
          <h3>{promotion.name}</h3>
          {getStatusBadge(promotion.is_active)}
        </div>
        <div className="card-actions">
          <button 
            className="edit-btn"
            onClick={handleEdit}
            title="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô"
          >
            ‚úèÔ∏è
          </button>
          <button 
            className="expand-btn"
            onClick={() => setIsExpanded(!isExpanded)}
          >
            {isExpanded ? '‚àí' : '+'}
          </button>
        </div>
      </div>

      <div className="card-content">
        <div className="basic-info">
          <div className="info-row">
            <span className="label">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:</span>
            <span 
              className="priority-badge"
              style={{ backgroundColor: getPriorityColor(promotion.priority) }}
            >
              {promotion.priority}
            </span>
          </div>
          <div className="info-row">
            <span className="label">‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ:</span>
            <span className={`stackable-badge ${promotion.is_stackable ? 'yes' : 'no'}`}>
              {promotion.is_stackable ? '‡πÉ‡∏ä‡πà' : '‡πÑ‡∏°‡πà'}
            </span>
          </div>
          <div className="info-row">
            <span className="label">‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤:</span>
            <span className="period">
              {formatDate(promotion.starts_at)} - {formatDate(promotion.ends_at)}
            </span>
          </div>
        </div>

        {isExpanded && (
          <div className="expanded-info">
            <div className="info-section">
              <h4>‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</h4>
              <div className="info-grid">
                <div className="info-item">
                  <span className="label">‡∏£‡∏ß‡∏°‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:</span>
                  <span>{promotion.user_limit_total || '‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î'}</span>
                </div>
                <div className="info-item">
                  <span className="label">‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:</span>
                  <span>{promotion.user_limit_per_day || '‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î'}</span>
                </div>
              </div>
            </div>

            <div className="info-section">
              <h4>‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏£‡∏ß‡∏°</h4>
              <div className="info-grid">
                <div className="info-item">
                  <span className="label">‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:</span>
                  <span>{promotion.global_quota?.toLocaleString() || '‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î'}</span>
                </div>
                <div className="info-item">
                  <span className="label">‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏£‡∏ß‡∏°:</span>
                  <span>{promotion.global_budget ? formatCurrency(promotion.global_budget) : '‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î'}</span>
                </div>
              </div>
            </div>

            <div className="info-section">
              <h4>‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢</h4>
              <div className="info-grid">
                <div className="info-item">
                  <span className="label">‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ï‡πà‡∏≠‡∏ö‡∏¥‡∏•:</span>
                  <span>{promotion.max_payout_per_bill ? formatCurrency(promotion.max_payout_per_bill) : '‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î'}</span>
                </div>
                <div className="info-item">
                  <span className="label">‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô:</span>
                  <span>{promotion.max_payout_per_day ? formatCurrency(promotion.max_payout_per_day) : '‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î'}</span>
                </div>
                <div className="info-item">
                  <span className="label">‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:</span>
                  <span>{promotion.max_payout_per_user ? formatCurrency(promotion.max_payout_per_user) : '‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î'}</span>
                </div>
              </div>
            </div>

            <div className="info-section">
              <h4>‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤</h4>
              <div className="settings-info">
                {getSettingsInfo(promotion.settings, promotion.type)}
              </div>
            </div>

            {promotion.settings?.betting_types && promotion.settings.betting_types.length > 0 && (
              <div className="info-section">
                <h4>‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô</h4>
                <div className="betting-types-display">
                  {promotion.settings.betting_types.map(type => {
                    const typeInfo = {
                      'football': '‚öΩ ‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•',
                      'boxing': 'ü•ä ‡∏°‡∏ß‡∏¢',
                      'all': 'üéØ ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'
                    }
                    return (
                      <span key={type} className="betting-type-tag">
                        {typeInfo[type] || type}
                      </span>
                    )
                  })}
                </div>
              </div>
            )}

            <div className="info-section">
              <h4>‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</h4>
              <div className="info-grid">
                <div className="info-item">
                  <span className="label">‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠:</span>
                  <span>{formatDate(promotion.created_at)}</span>
                </div>
                <div className="info-item">
                  <span className="label">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏°‡∏∑‡πà‡∏≠:</span>
                  <span>{formatDate(promotion.updated_at)}</span>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  )
}

export default PromotionCard
